name: "Setup Toit"
description: "A GitHub Action to set up Toit."
branding:
  icon: "play-circle"
  color: "yellow"

inputs:
  toit-version:
    description: "The version to install. Installs the latest version if not specified."
    default: "latest"

outputs:
  toit-url:
    description: "The URL to the Toit tar.gz file."
    value: ${{ steps.setup_constants.outputs.TOIT_URL }}
  toit-install-dir:
    description: "The directory where Toit is installed."
    value: ${{ steps.tmp-dir.outputs.TOIT_INSTALL_DIR }}
  toit-sdk-path:
    description: "The path to the Toit SDK."
    value: ${{ steps.tmp-dir.outputs.TOIT_INSTALL_DIR }}/toit
  toit-version:
    description: "The version of Toit installed."
    value: ${{ steps.toit_version.outputs.TOIT_VERSION }}

runs:
  using: "composite"
  steps:
    - name: Setup constants
      shell: bash
      id: setup_constants
      run: |
        TOIT_VERSION=${{ inputs.toit-version }}

        BETTER_NAME_VERSION=v2.0.0-alpha.163

        # Use sort -V to compare versions.
        if [[ "$TOIT_VERSION" == "latest" ]] || [[ "$(echo -e "$BETTER_NAME_VERSION\n$TOIT_VERSION" | sort -V | tail -n 1)" == "$TOIT_VERSION" ]]; then
          if [[ "$RUNNER_OS" = "Linux" ]]; then
            case "$(uname -m)" in
              x86_64)
                TOIT_FILE=toit-linux-x64.tar.gz
                ;;
              armv7l)
                TOIT_FILE=toit-linux-armv7.tar.gz
                ;;
              aarch64)
                TOIT_FILE=toit-linux-aarch64.tar.gz
                ;;
              *)
                echo "UNSUPPORTED ARCHITECTURE: $(uname -m)"
                exit 1
                ;;
            esac
          elif [[ "$RUNNER_OS" = "macOS" ]]; then
            case "$(uname -m)" in
              x86_64)
                TOIT_FILE=toit-macos-x64.tar.gz
                ;;
              arm64)
                TOIT_FILE=toit-macos-aarch64.tar.gz
                ;;
              *)
                echo "UNSUPPORTED ARCHITECTURE: $(uname -m)"
                exit 1
                ;;
            esac
          elif [[ "$RUNNER_OS" = "Windows" ]]; then
            TOIT_FILE=toit-windows-x64.tar.gz
          else
            echo "UNSUPPORTED RUNNER: $RUNNER_OS"
            exit 1
          fi
        else
          if [[ "$RUNNER_OS" = "Linux" ]]; then
            case "$(uname -m)" in
              x86_64)
                TOIT_FILE=toit-linux.tar.gz
                ;;
              armv7l)
                TOIT_FILE=toit-rpi.tar.gz
                ;;
              aarch64)
                TOIT_FILE=toit-aarch64.tar.gz
                ;;
              *)
                echo "UNSUPPORTED ARCHITECTURE: $(uname -m)"
                exit 1
                ;;
            esac
          elif [[ "$RUNNER_OS" = "macOS" ]]; then
            TOIT_FILE=toit-macos.tar.gz
          elif [[ "$RUNNER_OS" = "Windows" ]]; then
            TOIT_FILE=toit-windows.tar.gz
          else
            echo "UNSUPPORTED RUNNER: $RUNNER_OS"
            exit 1
          fi
        fi

        echo "TOIT_FILE=$TOIT_FILE" >> $GITHUB_OUTPUT

        if [[ $TOIT_VERSION = latest ]]; then
          echo "TOIT_URL=https://github.com/toitlang/toit/releases/latest/download/$TOIT_FILE" >> $GITHUB_OUTPUT
        else
          echo "TOIT_URL=https://github.com/toitlang/toit/releases/download/$TOIT_VERSION/$TOIT_FILE" >> $GITHUB_OUTPUT
        fi

    - name: Create temporary directory
      # Linux and macOS.
      if: startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS')
      shell: bash
      run: |
        INSTALL_DIR=$(mktemp -d)
        echo "TOIT_INSTALL_DIR=$INSTALL_DIR" >> $GITHUB_ENV

    - name: Create temporary directory
      # Windows.
      if: startsWith(runner.os, 'Windows')
      shell: powershell
      run: |
        $tempDir = New-TemporaryFile | % { $_.DirectoryName }
        echo "TOIT_INSTALL_DIR=$tempDir" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "Temporary directory is $tempDir"

    - name: Output temporary directory
      shell: bash
      id: tmp-dir
      run: |
        echo TOIT_INSTALL_DIR=$TOIT_INSTALL_DIR >> $GITHUB_OUTPUT

    - name: Download Toit
      shell: bash
      run: |
        cd '${{ steps.tmp-dir.outputs.TOIT_INSTALL_DIR }}'
        # Downloads the tar.gz file.
        curl -L -o ${{ steps.setup_constants.outputs.TOIT_FILE }} ${{ steps.setup_constants.outputs.TOIT_URL }}

    - name: Extract Toit
      shell: bash
      run: |
        cd '${{ steps.tmp-dir.outputs.TOIT_INSTALL_DIR }}'
        # Extracts the tar.gz leaving a 'toit' directory containing 'bin', 'tools' and 'lib' directory.
        tar x -zf toit-*.tar.gz

    - name: Add to PATH
      # Linux and macOS.
      if : startsWith(runner.os, 'Linux') || startsWith(runner.os, 'macOS')
      shell: bash
      run: |
        echo "${{ steps.tmp-dir.outputs.TOIT_INSTALL_DIR }}/toit/bin" >> $GITHUB_PATH

    - name: Add to PATH
      # Windows.
      shell: powershell
      if: startsWith(runner.os, 'Windows')
      run: |
        echo "${{ steps.tmp-dir.outputs.TOIT_INSTALL_DIR }}/toit/bin" | Out-File -FilePath $env:GITHUB_PATH -Append

    - name: Set Toit version output
      id: toit_version
      shell: bash
      run: |
        cd '${{ steps.tmp-dir.outputs.TOIT_INSTALL_DIR }}'
        # We use 'sed' as some version files had a trailing space.
        echo "TOIT_VERSION=$(sed 's/ $//' toit/VERSION)" >> $GITHUB_OUTPUT
